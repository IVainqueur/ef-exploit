import { configDotenv } from 'dotenv'
configDotenv()
import axios from 'axios'
import { errorWrapper, replaceInString } from './utils.js'
import { QUERIES, URLS } from './axios.config.js'

const HEADERS = {
    'Content-Type': 'multipart/form-data',
    'Authorization': process.env.AUTHORIZATION,
    'Cookie': process.env.COOKIE,
    'X-Ef-Access': process.env.X_EF_ACCESS
}

const completeStep = errorWrapper(async (stepId) => {
    const { data } = await axios.request({
        method: 'post',
        url: URLS.COMPLETION,
        data: {
            minutesSpent: Math.floor(Math.random() * (20 - 4 + 1)) + 4,
            studentActivityId: stepId,
            score: 100,
            studyMode: 0
        },
        headers: {
            ...HEADERS,
            'Content-Type': 'application/json'
        }
    })

    console.log(stepId, !data.length ? 'completed' : 'failed')
}, { exitOnError: false })

const getCurrentLesson = errorWrapper(async () => {
    const formData = new FormData();
    formData.append('q', QUERIES.CURRENT_LESSON)
    const { data } = await axios({
        method: 'post',
        url: URLS.CURRENT_LESSON,
        data: formData,
        headers: {
            ...HEADERS,
            'Content-Type': 'multipart/form-data'
        }
    })
    const containingStudentLesson = data.filter(el => el.studentLessonId)
    if (!containingStudentLesson.length) throw new Error("Couldn't find next lesson id");

    const nextLessonId = containingStudentLesson[0].studentLessonId
    const tmpInfo = await getLessonProgress(replaceInString(QUERIES.LESSON_PROGRESS_FAKE, { lessonId: nextLessonId }))
    if (!tmpInfo.templateLessonId) throw new Error("Couldn't find next lesson template lesson id");
    console.log("Solving", `"${tmpInfo.lessonName}"`)

    const templateLessonInfo = await getTemplateLessonInfo(tmpInfo.templateLessonId)
    if (!templateLessonInfo.lesson.id) throw new Error("Couldn't find next lesson id");

    // get actual lesson progress
    const lessonProgress = await getLessonProgress(templateLessonInfo.lesson.id + '.children.progress', true)

    const stepIds = lessonProgress.filter(el => el.stepName).map(el => el.children).flat().map(el => el.id.match(/student_activity!(.*)/)[1])

    for (const stepId of stepIds) {
        await completeStep(stepId)
    }
}, { exitOnError: false })

const getLessonProgress = errorWrapper(async (lessonId, returnALl = false) => {
    const formData = new FormData();
    formData.append('q', lessonId)
    const { data } = await axios({
        method: 'post',
        url: URLS.LESSON_PROGRESS,
        data: formData,
        headers: {
            ...HEADERS,
            'Content-Type': 'multipart/form-data'
        }
    })
    if (!data.length) throw new Error("Couldn't find lesson progress data");

    return returnALl ? data : data[0]
})

const getTemplateLessonInfo = errorWrapper(async (templateLessonId) => {
    const formData = new FormData();
    formData.append('q', 'pc_student_lesson_map!' + templateLessonId)
    const { data } = await axios({
        method: 'post',
        url: URLS.LESSON_PROGRESS,
        data: formData,
        headers: {
            ...HEADERS,
            'Content-Type': 'multipart/form-data'
        }
    })
    if (!data.length) throw new Error("Couldn't find template lesson progress data");
    return data[0]
})

// get lesson number from arguments
const lessonNumber = process.argv[2] ?? 1
console.log('Going to complete', lessonNumber, 'lesson(s)')

const main = async () => {
    for (let i = 0; i < lessonNumber; i++) {
        await getCurrentLesson()
    }
}

main()